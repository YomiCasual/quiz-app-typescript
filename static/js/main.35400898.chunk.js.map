{"version":3,"sources":["components/css/QuizCard.styles.ts","components/QuizCard.tsx","components/api.ts","components/css/Option.styles.ts","components/OptionsSelector.tsx","images/background.jpg","components/css/GlobalStyle.styles.ts","App.tsx","components/util.ts","index.tsx"],"names":["Wrapper","styled","div","AnswerButton","button","correct","userClicked","QuizCard","question","answers","func","userAnswer","questionNr","totalQuestions","changeWidth","className","style","width","dangerouslySetInnerHTML","__html","map","answer","correctAnswer","disabled","onClick","value","fetchQuestions","amount","a","api","fetchCategories","fetch","fetchResult","json","data","id","name","trivia_categories","Label","label","Select","select","difficulty","OptionsSelector","changeCategory","changeDifficulty","useState","categories","setCategories","useEffect","response","console","log","fectchData","htmlFor","onChange","length","category","item","GlobalStyle","createGlobalStyle","BcgImage","Button","App","selectCat","setSelectCat","selectDifficulty","setSelectDifficulty","setChangeWidth","start","setStart","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","generateAPI","url","diff","cat","results","array","incorrect_answers","correct_answer","sort","Math","random","startTrivia","setPercent","e","parseInt","currentTarget","undefined","pickedOption","prev","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0nDAEO,IAAMA,EAAUC,IAAOC,IAAV,KAiDPC,EAAeF,IAAOG,OAAV,KAqBG,gBAAEC,EAAF,EAAEA,QAASC,EAAX,EAAWA,YAAX,OAChBD,EAAU,WAAaA,GAAWC,EAAc,UAAY,aAEpD,gBAAED,EAAF,EAAEA,QAASC,EAAX,EAAWA,YAAX,OACRD,IAAeA,GAAWC,EAAhB,EAAkC,MCvBzCC,EArC0B,SAAC,GAQ/B,IAPHC,EAOE,EAPFA,SACAC,EAME,EANFA,QACAC,EAKE,EALFA,KACAC,EAIE,EAJFA,WACAC,EAGE,EAHFA,WACAC,EAEE,EAFFA,eACAC,EACE,EADFA,YAGA,OACA,eAACd,EAAD,WACK,qBAAKe,UAAU,aAAf,SACC,qBAAKA,UAAU,QAAQC,MAAO,CAAEC,MAAM,GAAD,OAAKH,EAAL,UAEvC,oBAAGC,UAAU,aAAb,uBACeH,EADf,MAC8BC,KAE9B,mBAAKE,UAAU,WAAWG,wBAAyB,CAAEC,OAAQX,KAE7D,qBAAMO,UAAU,eAAhB,SACKN,EAAQW,KAAI,SAAAC,GAAM,OACf,8BACI,cAAClB,EAAD,CACAE,SAAmB,OAAVM,QAAU,IAAVA,OAAA,EAAAA,EAAYW,iBAAkBD,EACvCf,aAAyB,OAAVK,QAAU,IAAVA,OAAA,EAAAA,EAAYU,UAAWA,EACtCE,WAAUZ,EACVa,QAASd,EACTe,MAAOJ,EALP,SAMI,sBAAMH,wBAAyB,CAAEC,OAAQE,QAPvCA,YChCjBK,EAAc,uCAAG,WAAOC,GAAP,eAAAC,EAAA,6DAEtBC,EAFsB,6CAEsBF,EAFtB,oCAGnBE,GAHmB,2CAAH,sDAOdC,EAAe,uCAAG,8BAAAF,EAAA,sEACDG,MAAM,wCADL,cACrBC,EADqB,gBAERA,EAAYC,OAFJ,cAErBC,EAFqB,0BAIrB,CAACC,GAAI,EAAGC,KAAM,QAJO,mBAIKF,EAAKG,qBAJV,2CAAH,qD,mvCCVrB,IAAMC,EAAQrC,IAAOsC,MAAV,KAMLC,EAASvC,IAAOwC,OAAV,KAcNzC,EAAUC,IAAOC,IAAV,KCNdwC,EAAa,CAClB,OACD,SACC,QAkEcC,EA7D+B,SAAC,GAA0C,IAAxCC,EAAuC,EAAvCA,eAAgBC,EAAuB,EAAvBA,iBAAuB,EACjDC,mBAA2B,IADsB,mBAC9EC,EAD8E,KAClEC,EADkE,KAmBpF,OAhBAC,qBAAU,YACU,uCAAG,4BAAArB,EAAA,+EAEUE,IAFV,OAEPoB,EAFO,OAGXF,EAAcE,GAHH,gDAMXC,QAAQC,IAAI,qBAND,yDAAH,qDAUhBC,KACD,IAKC,eAAC,EAAD,WAEQ,gCACA,cAACf,EAAD,CAAOgB,QAAQ,aAAf,+BACA,qBAAKvC,UAAU,SAAf,SACA,cAACyB,EAAD,CAAQe,SAAUX,EAAlB,SAEAG,EAAWS,OAAS,GAAKT,EAAW3B,KAAI,SAAAqC,GAAQ,OAC5C,wBAEAhC,MAAOgC,EAAStB,GAFhB,SAIEsB,EAASrB,MAHNqB,EAAStB,cAWtB,gCACA,cAACG,EAAD,CAAOgB,QAAQ,aAAf,wBACA,qBAAKvC,UAAU,SAAf,SACA,cAACyB,EAAD,CAAQe,SAAUV,EAAlB,SAEGH,EAAWtB,KAAI,SAACsC,GAAD,OACd,wBAEAjC,MAAOiC,EAFP,SAIEA,GAHGA,iBCxEN,MAA0B,uC,4nDCIlC,IAAMC,EAAcC,YAAH,KAcX5D,EAAUC,IAAOC,IAAV,IAuBM2D,GAmCbC,EAAS7D,IAAOG,OAAV,KC8IJ2D,EA5LM,WAAO,IAAD,EAEQjB,qBAFR,mBAEnBkB,EAFmB,KAERC,EAFQ,OAGsBnB,mBAAiB,QAHvC,mBAGnBoB,EAHmB,KAGDC,EAHC,OAKYrB,mBAAS,GALrB,mBAKnBhC,EALmB,KAKNsD,EALM,OAOCtB,oBAAS,GAPV,mBAOlBuB,EAPkB,KAOXC,EAPW,OAQKxB,oBAAS,GARd,mBAQlByB,EARkB,KAQTC,EARS,OASS1B,mBAA0B,IATnC,mBASlB2B,EATkB,KASPC,EATO,OAUG5B,mBAAS,GAVZ,mBAUlB6B,EAVkB,KAUVC,EAVU,OAWa9B,mBAAyB,IAXtC,mBAWlB+B,EAXkB,KAWLC,EAXK,OAYChC,mBAAS,GAZV,mBAYlBiC,EAZkB,KAYXC,EAZW,OAaOlC,oBAAS,GAbhB,mBAalBmC,EAbkB,KAaRC,EAbQ,KAuBnBC,EAAW,uCAAG,kCAAAvD,EAAA,sEAGFF,EAPM,GAIJ,cAGd0D,EAHc,OAKlBC,EAAI,sBAAkBnB,GAEtBkB,GAAOC,EAEU,MAAbrB,GAAmC,IAAdA,IACvBsB,EAAG,oBAAgBtB,GACnBoB,GAAOE,GAXS,SAeYvD,MAAMqD,GAflB,+BAewBnD,OAfxB,eAeZiB,EAfY,yBAiBdA,EAASqC,QAAQnE,KAAI,SAACZ,GAAD,mBAAC,eACfA,GADc,IAEjBC,SCxEiB+E,EDwEK,GAAD,mBAAKhF,EAASiF,mBAAd,CAAiCjF,EAASkF,iBCvEhE,YAAIF,GAAOG,MAAK,kBAAMC,KAAKC,SAAW,SADrB,IAACL,MDqDP,4CAAH,qDA+BXM,GAAW,uCAAG,4BAAAlE,EAAA,6DAEhBoD,EAAS,GACTR,GAAW,GAHK,SAKQW,IALR,OAKVV,EALU,OAOhBC,EAAaD,GACbD,GAAW,GACXF,GAAS,GACTY,GAAY,GACZa,GAAWpB,GAXK,4CAAH,qDAgEXoB,GAAa,SAACpB,GAElBP,GADkBO,EAAS,GApGL,EAoG4B,MAIpD,OACE,qCACA,cAAChB,EAAD,IACA,eAAC,EAAD,WACC,qBAAK5C,UAAU,MAAf,SACC,gCACA,oBAAIA,UAAU,QAAd,qBAKIsD,GAnHgB,IAmHPQ,EAAYrB,SACvB,gCACE,oBAAIzC,UAAU,SAAd,iDACE,cAAC,EAAD,CACA6B,eAnEa,SAACoD,GACtB/B,EAAagC,SAASD,EAAEE,cAAczE,SAmE9BoB,iBA7De,SAACmD,GACtB7B,EAAoB6B,EAAEE,cAAczE,cAkEjC4C,GAASY,IACR,oBAAGlE,UAAU,QAAb,UAAsBkE,EAAW,aAAe,QAAhD,KAA2DF,EAA3D,MA/HgB,OAoIhBV,GApIgB,IAoIPQ,EAAYrB,SACvB,cAACM,EAAD,CAAQtC,QAASsE,GAAjB,yBAKAvB,GAAY,wDAGXU,GAAYR,EAAUjB,OAAS,GAAKmB,IAAWF,EAAUjB,QACxD,cAAC,EAAD,CACF5C,WAAc+D,EAAS,EACvB9D,eAhJkB,EAiJlBL,SAAUiE,EAAUE,GAAQnE,SAC5BC,QAASgE,EAAUE,GAAQlE,QAC3BE,WAAckE,EAAcA,EAAYF,QAAUwB,EAClDzF,KA3Ec,SAACsF,GAEjB,IAAII,EAAeJ,EAAEE,cAAczE,MAC/BpB,GAAU,EAEV+F,IAAiB3B,EAAUE,GAAQe,iBACpCV,GAAS,SAAAqB,GAAI,OAAIA,EAAO,KACxBhG,GAAU,GAEb,IAAMM,EAAa,CACjBH,SAAUiE,EAAUE,GAAQnE,SAC5Ba,OAAQ+E,EACR/F,UACAiB,cAAemD,EAAUE,GAAQe,gBAGnCZ,GAAe,SAAAuB,GAAI,4BAAQA,GAAR,CAAc1F,OAE9BkE,EAAYrB,OAAS,IA3FJ,IA4FlB0B,GAAY,GACZZ,GAAS,GACTQ,EAAe,IACfF,EAAU,KAsDV9D,YAAaA,IAKb6D,EAAS,EAAI,GACbA,EAAS,EA3JS,GA2JcE,EAAYrB,SAAWmB,EAAS,GAChE,cAACb,EAAD,CAAQtC,QA3FO,WACnBoD,GAAU,SAAAyB,GAAI,OAAIA,EAAO,KACzBN,GAAWpB,EAAS,IAyFhB,gCAMJ,qBAAK5D,UAAU,4BE9MnBuF,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.35400898.chunk.js","sourcesContent":["import styled from 'styled-components'\r\n\r\nexport const Wrapper = styled.div`\r\n\r\n    .score {\r\n        font-size: 1.5rem;\r\n        color: #0C66BA;\r\n        margin-bottom: 1rem;\r\n    }\r\n\r\n    .questionNr {\r\n        font-size: 1rem;\r\n        margin-bottom: 0.5rem\r\n    }\r\n\r\n    .question {\r\n        font-size: 2rem\r\n    }\r\n\r\n    .myProgress {\r\n        width: 100%;\r\n        background-color: #E5E5E5;\r\n        border-radius: 20px;\r\n        margin: 2rem 0rem 1rem;\r\n        padding: 0.5rem\r\n    }\r\n\r\n    .myBar {   \r\n            \r\n              height: 25px;\r\n              border-radius: 20px;\r\n              background-color: #0C66BA;\r\n              transition: all 1s ease;\r\n              margin: 2px 5px;\r\n    }\r\n\r\n    .button-class {\r\n        margin-top: 1rem\r\n    }\r\n\r\n    @media (max-width:700px) { \r\n        margin-bottom: 2rem\r\n    }\r\n`\r\n\r\ntype AnswerButtonProps = {\r\n    correct: boolean,\r\n    userClicked: boolean\r\n}\r\n\r\n\r\nexport const AnswerButton = styled.button<AnswerButtonProps>`\r\n    outline: none;\r\n    border: none;\r\n    border-bottom: 1px solid #555555;\r\n    user-select: none;\r\n    padding: 0.5rem 1rem;\r\n    margin: 0.5rem 0;\r\n    width: 100%;\r\n    color: #555555;\r\n    font-size: 1.3rem;\r\n    background-color: white;\r\n    text-align: left;\r\n    cursor: pointer;\r\n    transition: 0.5s all linear;\r\n\r\n    &:hover, &:focus, &:active {\r\n        background-color: #0C66BA;\r\n        color: white;\r\n    }\r\n\r\n    &:disabled {\r\n        background-color: ${({correct, userClicked}) => (\r\n            correct ? \"#75d875\" : !correct && userClicked ? \"#e62c2e\" : \"#555555\"\r\n    ) };\r\n        opacity:  ${({correct, userClicked}) => (\r\n            correct ? 1 : !correct && userClicked ? 1 : 0.3\r\n    ) };\r\n        color: black\r\n    }\r\n    \r\n`","import React from 'react';\r\nimport { ANSWEROBJECT } from '../App';\r\nimport { Wrapper, AnswerButton } from './css/QuizCard.styles'\r\n\r\n\r\ntype QuestionProps = {\r\n    question: string;\r\n    answers: string[];\r\n    func: (e:React.MouseEvent<HTMLButtonElement>) => void;\r\n    userAnswer: ANSWEROBJECT | undefined;\r\n    questionNr: number;\r\n    totalQuestions: number,\r\n    changeWidth: number\r\n}\r\n\r\n\r\nconst QuizCard:React.FC<QuestionProps> = ({\r\n        question,\r\n        answers,\r\n        func,\r\n        userAnswer,\r\n        questionNr,\r\n        totalQuestions,\r\n        changeWidth\r\n    }) => {\r\n\r\n        return (\r\n        <Wrapper>\r\n             <div className=\"myProgress\">\r\n              <div className=\"myBar\" style={{ width: `${changeWidth}%` }}></div>\r\n                </div>\r\n            <p className=\"questionNr\">\r\n                Question: {questionNr} / {totalQuestions}\r\n            </p>\r\n            <p   className=\"question\" dangerouslySetInnerHTML={{ __html: question }}></p>\r\n\r\n            <div  className=\"button-class\" >\r\n                {answers.map(answer => (\r\n                    <div key={answer} > \r\n                        <AnswerButton \r\n                        correct={userAnswer?.correctAnswer === answer}\r\n                        userClicked = {userAnswer?.answer === answer}\r\n                        disabled={userAnswer ? true : false} \r\n                        onClick={func} \r\n                        value={answer}>\r\n                            <span dangerouslySetInnerHTML={{ __html: answer }}></span>\r\n                        </AnswerButton>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </Wrapper>\r\n)}\r\n\r\nexport default QuizCard;\r\n","\r\n\r\n// Fetch Questions\r\n\r\n\r\n\r\nexport const fetchQuestions = async (amount:number) => {\r\n\r\n    let api = `https://opentdb.com/api.php?amount=${amount}&type=multiple`\r\n    return api\r\n}\r\n\r\n\r\nexport const fetchCategories = async () => {\r\n    const fetchResult = await fetch('https://opentdb.com/api_category.php');\r\n    const data = await fetchResult.json();\r\n    return (\r\n        [ {id: 0, name: \"Any\"} , ...data.trivia_categories ]\r\n    )\r\n}","import styled from 'styled-components'\r\n\r\n\r\nexport const Label = styled.label`\r\n    display: block;\r\n    margin: 1rem 1rem 0.5rem;\r\n    font-weight: 600;\r\n`\r\n\r\nexport const Select = styled.select`\r\n    position: relative;\r\n    padding: 0.5rem 0 0.5rem 1rem;\r\n    border: 1px solid #0C66BA;\r\n    outline: none;\r\n    margin-bottom: 0.5rem;\r\n    cursor: pointer;\r\n    text-transform: capitalize;\r\n    width: 100%;\r\n    appearance: none;\r\n    font-size: 17px;\r\n    color: #555555\r\n`\r\n\r\nexport const Wrapper = styled.div`\r\n    margin: 2rem 0;\r\n\r\n    .select {\r\n        position: relative;\r\n        width: 60%\r\n    }\r\n\r\n    .select::after {\r\n        content: '<>';\r\n        font: 17px \"Consolas\", monospace;\r\n        color: #0C66BA;\r\n        -webkit-transform: rotate(90deg);\r\n        -moz-transform: rotate(90deg);\r\n        -ms-transform: rotate(90deg);\r\n        transform: rotate(90deg);\r\n        right: 11px;\r\n        /*Adjust for position however you want*/\r\n        \r\n        top: 7px;\r\n        padding: 0 0 2px;\r\n        /*left line */\r\n        \r\n        position: absolute;\r\n        pointer-events: none;\r\n    }\r\n\r\n    @media (max-width:700px) { \r\n\r\n        .select {\r\n            width: 100%;\r\n        }\r\n    }\r\n\r\n`","import React, { useState, useEffect } from 'react';\r\nimport { fetchCategories } from './api';\r\n\r\n//@styles\r\nimport { Label, Select, Wrapper } from './css/Option.styles'\r\n\r\n\r\ntype CategoriesData = {\r\n    id: number,\r\n    name: string\r\n  }\r\n\r\ntype OptionProps = {\r\n    changeCategory: any,\r\n    changeDifficulty: any\r\n}\r\n\r\nconst difficulty = [\r\n \"easy\",\r\n\"medium\", \r\n \"hard\"\r\n]\r\n\r\n\r\n\r\nconst OptionsSelector:React.FC<OptionProps> = ({ changeCategory, changeDifficulty }) => {\r\n    const[categories, setCategories] = useState<CategoriesData[]>([])\r\n\r\n    useEffect(() => {\r\n        const fectchData = async () => {\r\n            try {\r\n                let response = await fetchCategories()\r\n                setCategories(response)\r\n            }\r\n            catch(err) {\r\n                console.log(\"not able to fetch\")\r\n            }\r\n          \r\n        }\r\n        fectchData()\r\n    }, [])\r\n    \r\n\r\n \r\n    return (\r\n        <Wrapper>\r\n\r\n                <div>\r\n                <Label htmlFor=\"categories\">Select a Category</Label>\r\n                <div className=\"select\">\r\n                <Select onChange={changeCategory}>\r\n                {\r\n                categories.length > 0 && categories.map(category => (\r\n                    <option \r\n                    key={category.id} \r\n                    value={category.id}\r\n                    \r\n                    >{category.name}</option>\r\n                )) \r\n                    }\r\n                </Select>\r\n            </div>\r\n            </div>\r\n            \r\n     \r\n            <div>\r\n            <Label htmlFor=\"difficulty\">Difficulty</Label>\r\n            <div className=\"select\">\r\n            <Select onChange={changeDifficulty}>\r\n            {\r\n               difficulty.map((item:string)=> (\r\n                <option \r\n                key={item} \r\n                value={item}\r\n                \r\n                >{item}</option>\r\n               )) \r\n                }\r\n            </Select>\r\n            </div>\r\n            </div>\r\n            \r\n        </Wrapper>\r\n    );\r\n}\r\n\r\nexport default OptionsSelector;\r\n","export default __webpack_public_path__ + \"static/media/background.77b5f38a.jpg\";","import styled, { createGlobalStyle } from 'styled-components'\r\nimport BcgImage from '../../images/background.jpg'\r\n\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    * {\r\n        border-box: box-sizing;\r\n        margin: 0;\r\n    }\r\n\r\n    body {\r\n        display: flex;\r\n        flex-direction: column;\r\n        font-family: 'Montserrat', sans-serif;\r\n    }\r\n\r\n`\r\n\r\nexport const Wrapper = styled.div`\r\n    display: flex;\r\n\r\n    }\r\n\r\n   \r\n    .App {\r\n        width: 50vw;\r\n        padding: 3rem 6rem\r\n    }\r\n\r\n    .quizy {\r\n        font-size: 1.3rem;\r\n        font-weight: 400;\r\n    }\r\n\r\n    .header {\r\n        color: #0C66BA;\r\n        font-size: 64px;\r\n        font-weight: 600\r\n    }\r\n\r\n    .background-image {\r\n        background: url(${BcgImage}) center/cover no-repeat;\r\n        height: 100vh;\r\n        width: 50vw\r\n    }\r\n\r\n    .score {\r\n        font-size: 1.4rem;\r\n        margin-bottom: 1rem;\r\n    }\r\n\r\n\r\n    \r\n    @media (max-width:700px) {\r\n        flex-direction: column;\r\n        margin-bottom: 4rem;\r\n\r\n        .background-image {\r\n            order: 1;\r\n            width: 100vw!important;\r\n            height: 50vh;\r\n        }\r\n\r\n        .App {\r\n            padding: 2rem!important;\r\n            order: 2;\r\n            width: 80vw;\r\n        }\r\n\r\n        .header {\r\n            font-size: 36px\r\n        }\r\n\r\n`\r\n\r\n\r\nexport const Button = styled.button`\r\n        outline: none;\r\n        border: none;\r\n        background-color: #EC1717;\r\n        font-size: 20px;\r\n        padding: 1rem 2rem;\r\n        color: white;\r\n        cursor: pointer;\r\n        border-radius: 5px;\r\n\r\n        @media (max-width:700px) { \r\n            font-size: 14px;\r\n            padding: 1rem 1.3rem;\r\n\r\n        }\r\n    \r\n`","import React, { useState } from 'react';\nimport QuizCard from './components/QuizCard'\nimport { fetchQuestions } from './components/api'\nimport OptionsSelector from './components/OptionsSelector'\nimport { shuffleArray } from './components/util'\nimport { GlobalStyle, Wrapper, Button } from './components/css/GlobalStyle.styles'\n\nexport type ANSWEROBJECT = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string\n}\n\n\ntype QUESTION = {\n  category: string,\n  correct_answer: string,\n  difficulty: string,\n  incorrect_answers: string[],\n  question: string,\n  questions: string[];\n}\n\nexport type QUESTIONSTATE = QUESTION & {\n  answers: [] \n}\n\n\n\nconst App:React.FC = () => {\n  \n  const[selectCat, setSelectCat] = useState<number>()\n  const[selectDifficulty, setSelectDifficulty] = useState<string>(\"easy\")\n  \n  const[changeWidth, setChangeWidth] = useState(0)\n\n  const [start, setStart] = useState(false)\n  const [loading, setLoading] = useState(false)\n  const [questions, setQuestions] = useState<QUESTIONSTATE[]>([])\n  const [number, setNumber] = useState(0)\n  const [userAnswers, setUserAnswers] = useState<ANSWEROBJECT[]>([])\n  const [score, setScore] = useState(0)\n  const [gameOver, setGameOver] = useState(false)\n\n  \n\n\n\n  const TOTAL_QUESTIONS = 7\n\n  //make the api flexible by allowing selection of categories and diffficulty\n\n  const generateAPI = async() => {\n    let cat, diff\n \n    let url = await fetchQuestions(TOTAL_QUESTIONS)\n\n    diff = `&difficulty=${selectDifficulty}`\n\n    url += diff\n    \n    if (selectCat != null && selectCat !== 0) {\n      cat = `&category=${selectCat}`\n      url += cat\n    }\n\n\n    const response = await (await fetch(url)).json()\n    return (\n        response.results.map((question:QUESTION) => ({\n            ...question,\n            answers: shuffleArray([...question.incorrect_answers, question.correct_answer])\n\n        }))\n\n    )\n\n  }\n\n\n  \n  // Trigger the trivia to start\n\n  const startTrivia = async () => {\n      \n      setScore(0)\n      setLoading(true)\n      \n      const questions = await generateAPI()\n  \n      setQuestions(questions)\n      setLoading(false)\n      setStart(true)\n      setGameOver(false)\n      setPercent(number)\n  }\n\n\n  //Select a category from the dropdown\n\n  const changeCategory = (e: React.MouseEvent<HTMLButtonElement>) => {\n    setSelectCat(parseInt(e.currentTarget.value))\n  }\n\n\n  // Select a difficulty from the dropdown\n\n  const changeDifficulty = (e: React.MouseEvent<HTMLButtonElement>) => {\n      setSelectDifficulty(e.currentTarget.value)\n  }\n\n\n  // go to the next question\n  const nextQuestion = () => {\n    setNumber(prev => prev + 1)\n    setPercent(number + 1)\n  }\n\n\n  //confirm if the answer is correct\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n\n      let pickedOption = e.currentTarget.value\n      let correct = false\n     \n      if (pickedOption === questions[number].correct_answer ) {\n         setScore(prev => prev + 1)\n         correct = true\n      }\n      const userAnswer = {\n        question: questions[number].question,\n        answer: pickedOption,\n        correct,\n        correctAnswer: questions[number].correct_answer\n      }\n\n      setUserAnswers(prev => [...prev, userAnswer])\n\n      if(userAnswers.length + 1 === TOTAL_QUESTIONS ) {\n        setGameOver(true)\n        setStart(false)\n        setUserAnswers([])\n        setNumber(0)\n      }\n  }\n\n  const setPercent = (number:number) => {\n    const percent = ((number + 1)/ TOTAL_QUESTIONS) * 100\n    setChangeWidth(percent)\n  }\n\n  return (\n    <>\n    <GlobalStyle />\n    <Wrapper >\n     <div className=\"App\">\n      <div>\n      <h4 className=\"quizy\">Quizy</h4>\n\n   \n\n      {\n        (!start || userAnswers.length === TOTAL_QUESTIONS) &&  \n        <div> \n          <h2 className=\"header\">Practice Fun and Engaging Questions</h2>\n            <OptionsSelector  \n            changeCategory={changeCategory}\n            changeDifficulty={changeDifficulty}\n                />\n        </div>\n      }\n\n{\n        (start || gameOver) && \n          <p className=\"score\">{gameOver ? \"Last Score\" : \"Score\"}: {score} / {TOTAL_QUESTIONS}</p>\n\n      }\n\n      {\n        (!start || userAnswers.length === TOTAL_QUESTIONS) && \n        <Button onClick={startTrivia}>\n        Get Started\n        </Button>\n      }\n      {\n        loading &&  <p>Loading Questions ....</p>\n      }\n       {\n        !gameOver && questions.length > 0 && number !== questions.length &&\n          <QuizCard \n        questionNr = {number + 1}\n        totalQuestions = {TOTAL_QUESTIONS}\n        question={questions[number].question}\n        answers={questions[number].answers}\n        userAnswer = {userAnswers ? userAnswers[number] : undefined }\n        func={checkAnswer}\n        changeWidth={changeWidth}\n      />\n      }\n\n      {\n        number + 1 > 0 && \n        number + 1 < TOTAL_QUESTIONS && userAnswers.length === number + 1 &&\n        <Button onClick={nextQuestion}>\n        Next Question\n      </Button>\n      }\n      </div>\n    </div>\n    <div className=\"background-image\"></div>\n\n    </Wrapper>\n    </>\n  );\n}\n\nexport default App;\n\n\n","export const shuffleArray = (array: string[]) => {\r\n    return [...array].sort(() => Math.random() - 0.5)\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals"],"sourceRoot":""}